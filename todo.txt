git@heroku.com:growing-mist-751.git
TODO:
FIXME:   
CHANGED:  

Tasks 
x Make javascript widget work   
x	iframe should open link in popup window 
x	after popup window closes, iframe window should refresh
x	when logging in through embed, devise should redirect to a callback that closes window on success
x	create url model
x	make url model a resource of site site/1/url/index
x add remoteurl/1/reviews
x redirect after logout 
x Make light css embed version
x Create view for loggedin + remoteurl 404
x Alter remoteurl/1 to have loggedin, logged out version 
x install audiojs.zip
x Make nonexistant urls @ site/1/remote/jones-is-the-latest-blog work
x Checks for site/1/jones in content
x If jones doesn't exist > create    
x Pull profile pictures from services > render yaml or https://github.com/intridea/omniauth/wiki/Auth-Hash-Schema
x  - Add autofill user info (depending on login service)  
x If possible Fill out required profile info using omniauth callback

And most of this
! Integrate twilio record call controller/function
  x Copy paste recording controller into app
  - get
  ? Link data to review model
  


% Create "banner" version
% Make permalinks work for site model
- Add linkedin login    
- Create VAR url > in embed code so a domain can tag multiple index.html pages
% Create simple sales page (ala freshdesk)
  - home, tour, pricing, signup, blog, about, support
% Create user Dashboard       
% To prevent crossdomain tomfoolery: Parse url using javascript to determine url matches id      
% Get with john on launch/redis

? Add multiple social logins during second step of registration
? Create admin users with separate registration requirements
      
Not needed for launch
  ! Make logout happen within iframe (nopopup required)
  ? Add recording in progress state
  ? Add recording finished state
  ? convert site to mongoid 
  ?	Pair javascript/partial to list items and poll/push refresh them
  ? Let each site have its own list of required fields
  ? Semi anonymous posting
Long term
 smartphone app
 resume site
 
#	Turn site/1/remoteurl/1 into the primary iframe
#	  Unloggedin state
#    	show.html > logged out
#    	  click to popup login > done
#    	  login to leave your review > done
#  	  show.html > logged in
#        click to logout
#        example review
#        start review button
#  Make site/1/remoteurl/1/reviews display on plugin
#    display remoteurl/1/reviews/index 
#	create all routes/pages on rails
#	head
#		log in
#		start post page
#		edit post settings 
#	list                
#		All reviews
#  	vouch.com/site/17/page/12?layout=embed&version=forum 
#		Single review
#		vouch.com/site/17/page/12/post/32?layout=embed&version=forum

# Structure
#  div > replace > vouchframe > OnTrigger reload
#  iframe > Login, Submit review > Click to login           
#  div:replace > vouch reviews > poll for changes
#  load partial w/ reviews
# 
# 
# Current    
# frame .html
#  gets embed.js
#    has JS code
#    gets full_lanyard passes version type
#      full_lanyard processes version type & shows static iframe auth?layout=embed link 
#        login opens window trying to access protected "closewindow" page
#    find/replaces div sw_3 with content from full_lanyard      
# 
# New    
# frame .html
#  gets embed.js
#    has JS code
# 1.  gets full_lanyard passes site.id, remoteurl.id, layout?=type
#      full_lanyard processes version type & shows static iframe auth?layout=embed link 
#        login opens window trying to access protected "closewindow" page
#    find/replaces div sw_3 with content from full_lanyard
# 2.  gets site.id/remoteurl.id/reviews, layout?=type
#    find/replaces div "something" with content from reviews
# 
# 
#    
# 
# DOM
# -Load Widget w/ javascript
# -Load popup window
# -First registration > Add relevant info (email address)
# -After successful login 
# - Callback should change on page DOM to Logout / Start Review
# - Callback should close iframe   
# 
#   
# //Code for permalinks:
# //Site.all.each do |c|
#   match "#{c.permalink}/edit" => 'sites#edit', :permalink => c.permalink 
#   match "#{c.permalink}(/:site)" => 'sites#show', :permalink => c.permalink
# end
# 
# //Site.find_by_permalink(params[:permalink]) 

